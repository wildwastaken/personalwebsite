var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/blog-context.tsx
import React, {
  useContext,
  createContext
} from "react";

// src/utils/date.ts
var sortDate = (a, b) => {
  var _a, _b;
  if (!((_a = a.frontMatter) == null ? void 0 : _a.date) || !((_b = b.frontMatter) == null ? void 0 : _b.date))
    return -1;
  return new Date(b.frontMatter.date).getTime() - new Date(a.frontMatter.date).getTime();
};
var DATE_REGEX = /^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2})?(:\d{2}\.\d{3}Z)?$/;
var DATE_REGEX_WITH_SLASH = /^\d{4}\/\d{1,2}\/\d{1,2}( \d{1,2}:\d{1,2})?$/;
var isValidDate = (date) => DATE_REGEX.test(date) || DATE_REGEX_WITH_SLASH.test(date);

// src/blog-context.tsx
var BlogContext = createContext(null);
var BlogProvider = ({
  config,
  children,
  opts
}) => {
  const { date } = opts.frontMatter;
  if (date && !isValidDate(date)) {
    throw new Error(`Invalid date "${date}". Provide date in "YYYY/M/D", "YYYY/M/D H:m", "YYYY-MM-DD", "[YYYY-MM-DD]T[HH:mm]" or "[YYYY-MM-DD]T[HH:mm:ss.SSS]Z" format.`);
  }
  return /* @__PURE__ */ React.createElement(BlogContext.Provider, {
    value: { config, opts }
  }, children);
};
var useBlogContext = () => {
  const value = useContext(BlogContext);
  if (!value) {
    throw new Error("useBlogContext must be used within a BlogProvider");
  }
  return value;
};

export {
  __spreadValues,
  __spreadProps,
  __objRest,
  sortDate,
  BlogProvider,
  useBlogContext
};
